<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>July's Blog</title>
    <link>http://julykobe.github.io</link>
    <description>my blog (original by http://yansu.org)</description>
    
      <item>
        <title>《黑客与画家》摘要</title>
        <link>http://julykobe.github.io/2014/03/22/hacker-and-painter.html</link>
        <guid isPermaLink="true">http://julykobe.github.io/2014/03/22/hacker-and-painter.html</guid>
        <pubDate>Sat, 22 Mar 2014 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;本来想写一遍读书笔记来着，结果读着读着发现作者的阐述真是对胃口啊，干脆就偷懒做个摘抄好了。。&lt;/p&gt;

&lt;h3&gt;1，为什么书呆子不受欢迎&lt;/h3&gt;

&lt;p&gt;他们的心思在别的地方。&lt;/p&gt;

&lt;p&gt;。。。书呆子没有认识到“受欢迎”需要付出如此之多的努力。一般来说，对于那些高度困难的领域，只有身处其中的人，才能意识到成功需要不间断（虽然未必是自觉的）付出。&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;2，黑客与画家&lt;/h3&gt;

&lt;p&gt;。。。真正竞争软件设计的战场是新兴领域的市场，这里还没有人建立过防御工事。只要你能做出大胆的设计，有一个人或一批人同时负责设计和实现产品，你就能在这里战胜大公司。微软公司自己一开始就是这样走向成功的，苹果公司和惠普也是如此。我觉得几乎所有的创业公司都是这样取得成功的。&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;3，不能说的话&lt;/h3&gt;

&lt;p&gt;。。。1989年，一些聪明的研究人员设计了一个实验，给放射科医生看胸部X光片，请他们判断病人有没有肺癌迹象。研究人员记录了医生检查X光片时的眼球运动。研究发现，即使那些医生漏掉了一个癌症病灶，他们的目光通常也会在那个地方停留一会。这说明他们的头脑深处已经意识到那里有问题，但是这种深层的反应没有上升为自觉地意识。我认为，类似的思维机制存在每个人的头脑中，很多看似叛逆的“异端邪说”，早就“潜伏”在我们的思维深处。如果我们暂时关闭自我审查意识，它们就会第一个浮现出来。 &lt;/p&gt;

&lt;p&gt;。。。带动流行的两种力量之中，恐惧心比抱负心有力的多。好几次，我听到别人在用gyp（诈骗）这个词，我就一本正经地告诉他们，以后不能再用了，因为它是对吉普赛人（gypsy）的侮辱。但是事实上，词典写的很清楚，这两个词之间不存在词源关系，我只是在开玩笑而已。不过，别人几乎总是很诚惶诚恐地对待这个玩笑，立刻表现出一种怀着畏惧的服从。这就是流行的本质，衣着也好，思想也好，它使得人们没有自信。在新事物面前，人们会感到自己错了：这是我早就应该知道的事情啊。&lt;/p&gt;

&lt;p&gt;。。。优秀作品往往来自于其他人忽视的想法，而最被忽视的想法就是那些被禁止的思想观点。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;在碰到不想说的话时，要多多进行深入思考。&lt;/p&gt;

&lt;h3&gt;5，另一条路&lt;/h3&gt;

&lt;p&gt;。。。“你的电脑”这个概念正慢慢成为过去时，取而代之的是“你的数据”。你应该可以从任何电脑上获取你的数据。或者更准确的说，在任何终端设备上获取你的数据，终端设备不一定是电脑。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;     终端设备不应该存储数据，它们应该像电话那样。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;。。。解决新代码的bug要比解决历史遗留代码的bug容易。在自己刚写好的代码中，找出bug往往会比较快。有时，你只要看到出错提示，就知道问题出在哪里，甚至都不用看源码，因为潜意识中你已经在担心那个地方可能会错。&lt;/p&gt;

&lt;p&gt;。。。如果你是一个黑客，并且梦想自己创业，可能会有两件事情令你望而却步，不敢真正开始采取行动。一件是你不懂得管理企业，另一件是你害怕竞争。可是实际上，这两件事都是没有通电的电篱笆。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;     首先，管理企业其实很简单，只要记住两点就可以了：做出用户喜欢的产品，保证开支小于收入。只要做到这两点，你就会超过大多数创业公司。随着事业的发展，你自己就能琢磨出来其他的诀窍。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;。。。至于如何做出用户喜欢的产品，下面是一些通用规则。从制造简洁的产品开始着手，首先要保证你自己愿意使用。然后，迅速地做出1.0版，并且不断加以改进，整个过程中密切倾听用户的反馈。用户总是对的，但是不同的用户要求不一样。低端的用户要求简化操作和清晰易懂，高端的用户要求你增加新功能。软件最大的好处就是让一切变得简单。如果竞争对手的产品很糟糕，你也不要自鸣得意。比较软件的标准应该是看对手的软件将来会有什么功能，而不是现在有什么功能。无论何时，你都要使用自己的软件。Viaweb的主要功能是简历网上商店，但是我们也使用它简历自己的网站。不要只因为对方的头衔是市场专家、设计师或产品经理，就盲目听从他们的话。如果他们的观点真的很好，那就听从他们，关键是你要自己判断，不要盲从。只有懂得设计的黑客，才能设计软件，不能交给对软件一知半解的设计师。如果你不打算自己动手设计和开发，那就不要创业。&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;6，如何创造财富&lt;/h3&gt;

&lt;p&gt;金钱不等于财富。&lt;/p&gt;

&lt;p&gt;。。。财富是最基本的东西。我们需要的东西就是财富，食品、服装、住房、骑车、生活用品、外出旅行等都是财富。即使你没有钱，你也能拥有财富。&lt;/p&gt;

&lt;p&gt;。。。财富才是你的目标，金钱不是。&lt;/p&gt;

&lt;p&gt;。。。交换媒介的优点是，它使得交易可以进行下去。缺点是，它往往模糊了交易的是指。人们觉得做生意就是为了挣钱，但是金钱其实只是一种中介，让大家可以更方便的获得自己想要的东西。大多数生意的目的是为了创造财富，做出人们真正需要的东西。&lt;/p&gt;

&lt;p&gt;。。。你以为买家在收购前会做很多研究，搞清楚你的公司到底值多少钱，其实根本不是这么回事，他们真正在意的只是你拥有的用户数量。&lt;/p&gt;

&lt;p&gt;。。。像优化软件一样优化公司，用户数量就是判断公司表现好坏的指标。做过软件优化的人都知道，优化难点就是如何测出系统的表现。如果凭空猜测软件最慢的是哪一部分以及怎样让它快起来，那估计百分百会猜错。&lt;/p&gt;

&lt;p&gt;。。。用户数量也许不是最好的测量指标，但应该也相差不远了。买家关心它，收入依赖它，竞争对手恐惧它，记者和潜在用户则是被它打动。无论你的技术水平有多高，用户数量都比你的判断更能准确反映哪些问题应该优先解决。&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;9，设计者的品味&lt;/h3&gt;

&lt;p&gt;。。。优秀设计的原则是许多学科的共同原则，一再反复地出现。&lt;/p&gt;

&lt;p&gt;1、  好设计是简单的设计。&lt;/p&gt;

&lt;p&gt;2、  好设计是永不过时的设计。&lt;/p&gt;

&lt;p&gt;3、  好设计是解决主要问题的设计。&lt;/p&gt;

&lt;p&gt;4、  好设计是发性的设计。&lt;/p&gt;

&lt;p&gt;5、  好设计通常是有点趣味性的设计。&lt;/p&gt;

&lt;p&gt;6、  好设计是艰苦的设计。&lt;/p&gt;

&lt;p&gt;7、  好设计是看似容易的设计。&lt;/p&gt;

&lt;p&gt;8、  好设计是对称的设计。&lt;/p&gt;

&lt;p&gt;9、  好设计是模仿大自然的设计。&lt;/p&gt;

&lt;p&gt;10、 好设计是一种再设计。&lt;/p&gt;

&lt;p&gt;11、 好设计是能够复制的设计。&lt;/p&gt;

&lt;p&gt;12、 好设计常常是奇特的设计。&lt;/p&gt;

&lt;p&gt;13、 好设计是成批出现的。&lt;/p&gt;

&lt;p&gt;14、 好设计常常是大胆的设计。&lt;/p&gt;

&lt;p&gt;。。。单单是无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进。你必须锻炼自己。只有在成为某个领域的专家之后，你才会听到心里有一个细微的声音说：“这样解决太糟糕了！一定有更好的选择。”不要忽视这种声音，要培育他们。优秀作品的秘诀就是：非常严格的品味，再加上实现这种品味的能力。                                                                                                                                                                                                                                                                                                                       &lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;11，一百年后的编程语言&lt;/h3&gt;

&lt;p&gt;。。。编程语言会发展到放弃基本数据类型之一的整数这一步吗？&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;性能分析器的重要。&lt;/p&gt;

&lt;h3&gt;12，拒绝平庸&lt;/h3&gt;

&lt;p&gt;。。。一般情况是，创业公司要么赢得一切，要么彻底失败。你要么成为富翁，要么一无所获。创业的时候，如果你选择了错误的技术，竞争对手就会一举打败你。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;     罗伯特·莫里斯和我都很了解Lisp语言，我们相信自己的直觉，找不出任何不使用它的理由。我们知道其他人都用C++或Perl开发软件，但是我们不觉得这说明了什么问题。如果别人用什么技术，你也用什么技术，那么你大概只能使用Windows了。选择使用哪一种技术的时候，你不能考虑别人的作法，只能考虑什么样的技术能最好地完成工作。

     创业公司尤其如此。大公司可以互相模仿，但是创业公司就不行。我觉得很多人没有意识到这一点，尤其是一些创业者。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h3&gt;14，梦寐以求的编程语言&lt;/h3&gt;

&lt;p&gt;。。。对黑客来说，选择编程语言的时候，还有一个因素比简洁更重要，那就是这种语言必须能够帮助自己做到想做的事。在编程语言的历史上，防止程序员做出“错误”举动的措施多得惊人。这是语言设计者很自以为是的危险举动，他们怎么知道程序员该做什么不该做什么？我认为，语言设计者应该假定他们的目标用户是一个天才，会做出各种他们无法预知的举动，而不是假定目标用户是一个笨手笨脚的傻瓜，需要别人的保护才不会伤到自己。如果用户真的是傻瓜，不管你怎么保护她，他还是会搬起石头砸自己的脚。&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;15，设计与研究&lt;/h3&gt;

&lt;p&gt;。。。在软件领域，贴近用户的设计思想被归纳为“弱即是强”（Worse is Better）模式。&lt;/p&gt;

&lt;p&gt;。。。其中一个重要结论就是软件功能的增加并不必然带来质量的提高。有时候，更少的功能（“弱”）反而是更好的选择（“强”），因为这会使得软件的可用性提高。相比那些体积庞大、功能全面、较难上手的软件，一种功能有限但易于使用的软件可能对用户有更大的吸引力。&lt;/p&gt;

&lt;p&gt;。。。先做出原型，再逐步加工作出成品，这种方式有利于鼓舞士气，因为它使得你随时都可以看到工作的成效。开发软件的时候，我有一条规则：任何时候，代码都必须能够运行。如果你正在写的代码一个小时之后就可以看到运行结果，这好比让你看到不远处就是唾手可得的奖励，你因此会受到激励和鼓舞。&lt;/p&gt;

&lt;hr&gt;
</description>
      </item>
    
      <item>
        <title>OpenStack Ceilometer数据存储与API源码解析</title>
        <link>http://julykobe.github.io/2013/06/12/hacking-in-openstack-ceilometer-api.html</link>
        <guid isPermaLink="true">http://julykobe.github.io/2013/06/12/hacking-in-openstack-ceilometer-api.html</guid>
        <pubDate>Wed, 12 Jun 2013 00:00:00 +0800</pubDate>
        <description>&lt;h3&gt;MongoDB的Collections&lt;/h3&gt;

&lt;p&gt;Ceilometer在MongoDB中共有这么几个Collections&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;- user
  - { _id: user id
      source: [ array of source ids reporting for the user ]
      }
- project
  - { _id: project id
      source: [ array of source ids reporting for the project ]
      }
- meter
  - the raw incoming data
- resource
  - the metadata for resources
  - { _id: uuid of resource,
      metadata: metadata dictionaries
      user_id: uuid
      project_id: uuid
      meter: [ array of {counter_name: string, counter_type: string,
                         counter_unit: string} ]
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中meter是采集到的数据，其他的都是固定值&lt;/p&gt;

&lt;h3&gt;Collector对数据库的写数据&lt;/h3&gt;

&lt;p&gt;Collector在接收到采集的数据后，会调用&lt;code&gt;record_metering_data()&lt;/code&gt;对数据进行写入，相应mongodb的代码在&lt;code&gt;ceilometer.storage.impl_mongodb&lt;/code&gt;中&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;def record_metering_data(self, data):
    self.db.user.update(
        {&amp;#39;_id&amp;#39;: data[&amp;#39;user_id&amp;#39;]},
        {&amp;#39;$addToSet&amp;#39;: {&amp;#39;source&amp;#39;: data[&amp;#39;source&amp;#39;],},},
        upsert=True,
    )
    self.db.project.update(
        {&amp;#39;_id&amp;#39;: data[&amp;#39;project_id&amp;#39;]},
        {&amp;#39;$addToSet&amp;#39;: {&amp;#39;source&amp;#39;: data[&amp;#39;source&amp;#39;],},},
        upsert=True,
    )

    self.db.resource.update(
        {&amp;#39;_id&amp;#39;: data[&amp;#39;resource_id&amp;#39;]},
        {&amp;#39;$set&amp;#39;: {&amp;#39;project_id&amp;#39;: data[&amp;#39;project_id&amp;#39;],
                  &amp;#39;user_id&amp;#39;: data[&amp;#39;user_id&amp;#39;],
                  &amp;#39;metadata&amp;#39;: data[&amp;#39;resource_metadata&amp;#39;],
                  &amp;#39;source&amp;#39;: data[&amp;#39;source&amp;#39;],},
         &amp;#39;$addToSet&amp;#39;: {&amp;#39;meter&amp;#39;: {&amp;#39;counter_name&amp;#39;: data[&amp;#39;counter_name&amp;#39;],
                                 &amp;#39;counter_type&amp;#39;: data[&amp;#39;counter_type&amp;#39;],
                                 &amp;#39;counter_unit&amp;#39;: data[&amp;#39;counter_unit&amp;#39;],},},
         },
        upsert=True,
    )

    record = copy.copy(data)
    self.db.meter.insert(record)
    return
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面代码可知，每次存储时都会更新user,project和resource，然后将数据完全写入到meter中，写入后的数据格式如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;counter_name&amp;quot;: &amp;quot;disk.write.requests&amp;quot;,
  &amp;quot;user_id&amp;quot;: &amp;quot;4ff44f4665564b2abcb8e1f1619f2b85&amp;quot;,
  &amp;quot;message_signature&amp;quot;: &amp;quot;8473976666aecd078a281afed936839b737ceaf4bb63654759d63514bdc9ee03&amp;quot;,
  &amp;quot;timestamp&amp;quot;: ISODate(&amp;quot;2013-05-21T22:33:14.0Z&amp;quot;),
  &amp;quot;resource_id&amp;quot;: &amp;quot;b7fc623d-1d4a-4ac7-b96b-78c9d921fa74&amp;quot;,
  &amp;quot;resource_metadata&amp;quot;: {
    &amp;quot;ramdisk_id&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;display_name&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;instance-00000001&amp;quot;,
    &amp;quot;disk_gb&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;availability_zone&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;kernel_id&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;ephemeral_gb&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;host&amp;quot;: &amp;quot;e781ff9ce97dcc328d8826cfb19a20c001b866cb20859653c2f481b1&amp;quot;,
    &amp;quot;memory_mb&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;instance_type&amp;quot;: &amp;quot;42&amp;quot;,
    &amp;quot;vcpus&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;root_gb&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;image_ref&amp;quot;: &amp;quot;da04e6dd-4cc7-4594-87d8-60927c07c396&amp;quot;,
    &amp;quot;architecture&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;os_type&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;reservation_id&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;image_ref_url&amp;quot;: &amp;quot;http:\/\/192.168.0.6:8774\/676730085ab84296a9b4a7d68ee76078\/images\/da04e6dd-4cc7-4594-87d8-60927c07c396&amp;quot;
  },
  &amp;quot;source&amp;quot;: &amp;quot;openstack&amp;quot;,
  &amp;quot;counter_unit&amp;quot;: &amp;quot;request&amp;quot;,
  &amp;quot;counter_volume&amp;quot;: NumberInt(1366),
  &amp;quot;project_id&amp;quot;: &amp;quot;be13e080970d44b280e4843e084bb2b1&amp;quot;,
  &amp;quot;message_id&amp;quot;: &amp;quot;6cf1d76c-c266-11e2-a987-5eafb2e29593&amp;quot;,
  &amp;quot;counter_type&amp;quot;: &amp;quot;cumulative&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个disk.write.requests的数据，其中resource_metadata如果无变化的话，没个都会带这些数据，具体原因不详&lt;/p&gt;

&lt;p&gt;另外，重要的东西在&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;counter_unit 计量单位&lt;/li&gt;
&lt;li&gt;counter_volume 计量数值&lt;/li&gt;
&lt;li&gt;counter_type 计量类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;计量内容&lt;/h3&gt;

&lt;p&gt;在&lt;a href=&quot;http://docs.openstack.org/developer/ceilometer/measurements.html&quot;&gt;文档&lt;/a&gt;中讲了计量值和其单位&lt;/p&gt;

&lt;p&gt;首先是计量类型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cumulative  随时间的累计值（如cpu总时长）&lt;/li&gt;
&lt;li&gt;Gauge  离散项(floating IPs, image uploads)和变化的值 (disk I/O)&lt;/li&gt;
&lt;li&gt;Delta  随时间的变化量（带宽等）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;计量单位比较多了，每个都不太一样，这个可以查询文档，如磁盘读写请求的单位为&amp;quot;request&amp;quot;&lt;/p&gt;

&lt;h3&gt;API对数据库的读操作&lt;/h3&gt;

&lt;p&gt;数据存储只是Ceilometer的一小部分，如果合理的利用和分析采集到的数据才比较重要，另外这部分也是暴露出来给开发者的部分&lt;/p&gt;

&lt;p&gt;API服务以wsgi service方式运行在后端，Ceilometer有v1和v2两个版本的API，v1会被弃用，这里只讲v2部分&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;GET /v2/meters/cpu?q.op=ge&amp;amp;q.op=lt&amp;amp;q.op=eq&amp;amp;q.value=2013-05-19+23%3A00%3A00&amp;amp;q.value=2013-05-20+00%3A00%3A00&amp;amp;q.value=b7fc623d-1d4a-4ac7-b96b-78c9d921fa74&amp;amp;q.field=timestamp&amp;amp;q.field=timestamp&amp;amp;q.field=resource
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个我截取下来的请求，首先我们看到一个资源地址&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;GET /v2/meters/cpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据V2的Controller，我们可以看到是MetersController()对它进行处理的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;class V2Controller(object):
    resources = ResourcesController()
    meters = MetersController()
    alarms = AlarmsController()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>